// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name String
  password String
  phone String @unique
  address     Address[]
  orders      Order[]
  ratings    Ratings[]
}

model Address {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  pincode     String
  city        String
  name        String
  phoneNumber String
  addressDetail String
  addressType String
  order       Order[]
}

model Otp{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  emailOtp String
  phone String @unique
  phoneOtp  String
  otpExp DateTime
}

model Admin{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  password String
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  products CategoryProduct[]
}

model Product{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  images Image[]
  description String @default("")
  price Float
  discountedPrice Float
  stock Int
  categories CategoryProduct[]
  orderItem OrderItem[]
  ratings  Ratings[] 
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  url String @default("")
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])
}

model CategoryProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  categoryId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}


model Order {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  createdBy   User     @relation(fields: [userId], references: [id])   
  items       OrderItem[]
  totalPrice  Float
  orderType   String 
  orderAddressId   String  @db.ObjectId
  orderAddress  Address @relation(fields: [orderAddressId],references: [id])
  paymentStatus  String
  createdAt   DateTime @default(now())
  members Member[]
  ratings     Ratings[]
}

model OrderItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String?    @db.ObjectId
  order       Order?     @relation(fields: [orderId], references: [id])
  productId   String    @db.ObjectId
  product     Product   @relation(fields: [productId],references: [id])
  quantity    Int
}


model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  memberId String
  name String
  phone String
  paymentStatus String @default("Pending")
  individualPayment Float
  orderId     String @db.ObjectId
  order       Order   @relation(fields: [orderId],references: [id]) 
}

model Ratings{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  rating Int
  review String
  productId String @db.ObjectId
  product Product @relation(fields: [productId],references: [id])
  userId  String @db.ObjectId
  user User @relation(fields: [userId],references: [id])
  orderId String  @db.ObjectId
  order   Order @relation(fields: [orderId], references: [id])
}
